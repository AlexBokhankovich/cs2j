group JavaPrettyPrintTemplates;

itsmine(now, includeDate) ::= <<
//
//
// This file was translated from C# to Java by CS2J (http://www.cs2j.com).
//
// This code is to be used for evaluation of the CS2J tool ONLY.
//
// For more information about CS2J please contact cs2jcontact@scorm.com
<if(includeDate)>
//
// Translated: <now><\n>
<endif>
//

>>

package(now, includeDate, packageName, comments, modifiers, type, endComments) ::= <<
<itsmine(now=now,includeDate=includeDate)>
<if(packageName)>package <packageName>;<endif>

<comments; separator="\n">
<type>

<endComments; separator="\n">
>>

// ******* CLASSES ***********

class(modifiers, comments, attributes, name, typeparams, inherits, body) ::= <<
<comments; separator="\n">
<modifiers(modifiers)>class <name> <typeparams> <inherits>
{
    <body>
}
>>

iface(modifiers, comments, attributes, name, imps, body) ::= <<
<comments; separator="\n">
<modifiers(modifiers)>interface <name> <imps>
{
    <body>
}
>>

class_body(entries) ::= <<
<entries; separator="\n">
>>

class_member(comments, member) ::= <<
<comments; separator="\n">
<member>
>>

method(modifiers, typeparams, type, name, params, exception="Throwable", bodyIsSemi, body) ::= <<
<modifiers(modifiers)><typeparams> <type> <name>(<params; separator=", ">) throws <exception><if(!bodyIsSemi)> {<else>;<endif>
    <body>
<if(!bodyIsSemi)>}<endif>
>>

field(modifiers, type, field, comments, init) ::= "<comments><modifiers(modifiers)><type> <field>;"

variable_declarators(varinits) ::= "<varinits; separator=\", \">"
variable_declarator(typename,init) ::= "<typename><if(init)> = <init><endif>" 

primary_expression_start_parts(start,follows) ::= "<start><follows>"

type_param_constraint(param, constraints) ::= "<param> extends <constraints; separator=\" & \">"

fixed_parameter(mod,type,name,def) ::= <<
<mod> <type> <name><if(def)> = <def><endif>
>>

identifier(id, id2) ::= "<id><if(id2)>::<id2><endif>"

statement_list(statements) ::= <<
<statements; separator="\n">
>>

statement(statement) ::= <<
<statement>
>>


//***** local var declarations:

local_variable_declaration(type,decs) ::= "<type> <decs>"
local_variable_declarator(name, init) ::= "<name><if(init)> = <init><endif>"

return(exp) ::= "return <exp>;"
throw(exp) ::= "throw <exp>;"

// ******* ENUMS ***********

enum(modifiers,comments, attributes, name, body) ::= <<
<comments; separator="\n">
<modifiers(modifiers)>enum <name>
{
    <body>
}
>>

enum_body(values) ::= "<values; separator=\",\n\">"

enum_member(comments, value) ::= <<
<comments; separator="\n">
<value>
>>

type(name, rs, stars, opt) ::= "<name><rs><stars><opt>"
namespace_or_type(type1, type2, types) ::= "<type1><if(type2)>::<type2><endif><if(types)>.<types; separator=\".\"><endif>"

modifiers(mods) ::= "<if(mods)><mods; separator=\" \"> <endif>"

type_parameter_list(items) ::= <<
\<<items; separator=", ">\>
>>

extends(types) ::= "<if(types)>extends <types; separator=\",\"><endif>"
imps(types) ::= "<if(types)>implements <types; separator=\",\"><endif>"

// ******* STATEMENTS *******
if_template(comments, cond,then,thensemi, thenbraces,else, elseisif, elsesemi,elsebraces) ::= <<
<comments; separator="\n">
if (<cond>)
<block(statements = then, issemi = thensemi, isbraces = thenbraces)>
<if(else)>
else<if(elseisif)> <block(statements = else, issemi = elsesemi, isbraces = elsebraces)><else>

<block(statements = else, issemi = elsesemi, isbraces = elsebraces)>
<endif>
<endif> 
>>

while(comments,cond,block,blocksemi, blockbraces) ::= <<
<comments; separator="\n">
while (<cond>)
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>

for(comments,init,cond,iter,block,blocksemi, blockbraces) ::= <<
<comments; separator="\n">
for (<init>;<cond>;<iter>)
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>

foreach(comments,type,loopid,fromexp,block,blocksemi, blockbraces) ::= <<
<comments; separator="\n">
for (<type> <loopid> : <fromexp>)
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>

try(comments,block,blocksemi, blockbraces, catches, fin) ::= <<
<comments; separator="\n">
try
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
<catches>
<fin>
>>

catch_template(type, id, block,blocksemi, blockbraces) ::= <<
catch (<type> <id>)
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>

fin(block,blocksemi, blockbraces) ::= <<
finally
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>


switch(comments,scrutinee, sections) ::= <<
<comments; separator="\n">
switch(<scrutinee>)
{
    <sections>
}
>>

switch_section(labels,statements) ::= <<
<labels>
    <statements; separator="\n">

>>

case(what) ::= <<
case <what>: 
>>

default_template() ::= <<
default: 
>>

lock(comments,exp,block,blocksemi, blockbraces) ::= <<
<comments; separator="\n">
lock(<exp>)
<block(statements = block, issemi = blocksemi, isbraces = blockbraces)>
>>

block(statements,issemi,isbraces) ::= <<
<if(issemi)>
    ;
<else>
<if(isbraces)>
{

<endif>
    <statements>
<if(isbraces)>
}
<endif>
<endif>
>>

// ******* EXPRESSIONS *******

cast_expr(type, exp) ::= "(<type>)<exp>"
construct(type, args, inits) ::= "new <type>(<args>)<if(inits)> /* [UNIMPLEMENTED] <inits> */<endif>"
application(func, funcparens, args) ::= "<optparens(parens=funcparens,e=func)>(<args>)" 
index(func, funcparens, args) ::= "<optparens(parens=funcparens,e=func)>[<args>]" 
stackalloc(type, exp) ::= "stackalloc <type>[<exp>]"
typeof(type) ::= "<type>.class"

cond(condexp,condparens,thenexp,thenparens,elseexp,elseparens) ::= <<
<if(condparens)>(<endif><condexp><if(condparens)>)<endif> ? <if(thenparens)>(<endif><thenexp><if(thenparens)>)<endif> : <if(elseparens)>(<endif><elseexp><if(elseparens)>)<endif>
>>

// ******* TYPES ***********
void() ::= "void"

// ******* MISC ***********

optparens(parens, e) ::= "<if(parens)>(<endif><e><if(parens)>)<endif>"
parens(e) ::= "(<e>)"
rank_specifiers(rs) ::= "<rs>"
op(comments,pre,op,post,mkparen,space) ::= <<
<comments; separator="\n">
<if(mkparen)>(<endif><if(pre)><pre><space><endif><op><if(post)><space><post><endif><if(mkparen)>)<endif>
>>
assign(lhs,lhsparen,assign,rhs,rhsparen) ::= "<if(lhsparen)>(<endif><lhs><if(lhsparen)>)<endif> <assign> <if(rhsparen)>(<endif><rhs><if(rhsparen)>)<endif>"
generic_args(args) ::= "\<<args>\>"
parameter(annotation,param) ::=  "/* <annotation> */ <param>"
inline_comment(payload, explanation) ::= "/* <explanation> <payload> */"
commalist(items) ::= "<items; separator=\", \">"
dotlist(items) ::= "<items; separator=\".\">"
//list(items,sep) ::= "<items;separator=sep>"
list(items,sep) ::= <<
<items;separator=sep>
>>
seplist(items,sep) ::= <<
<items;separator=sep>
>>

unsupported(reason, text) ::= "/* [UNSUPPORTED] <reason> \"<text>\" */"


// ******* UTILITY ***********
string(payload) ::= "<payload>"

verbatim_string(payload) ::= <<
"<payload; separator="\" + \n\"">"
>>
